{
  "prompt": "Use Terraform 1.6+ HCL syntax. Ensure all code is `terraform fmt` compliant. Use snake_case for variable names and outputs. Avoid hardcoding values â€” prefer variables or locals. Use `terraform.tfvars` for non-sensitive defaults. Keep provider versions pinned and explicit. Organize each provider into its own module folder when possible. Keep `.tf` files focused by purpose (variables.tf, outputs.tf, main.tf). Use `README.md` files for each module with usage examples. Use workspaces for environment separation (dev, staging, prod). Use the official `cloudflare` provider (pin to a specific version). Store API tokens in an external secrets manager or environment variables. Tag resources with `managed_by = "terraform"` for clarity. Configure DNS records with TTLs appropriate for usage (default to `1` for dev). Use `for_each` for bulk DNS record creation. When possible, use `cloudflare_ruleset` instead of deprecated `firewall_rule`. Use the `Telmate/proxmox` provider with pinned version. Keep VM templates separate from VM instance definitions. Use `cloud-init` templates for VM provisioning. Store sensitive Proxmox credentials in environment variables, not inline. Always set explicit `target_node` and `vmid` for clarity. Use variables for CPU, RAM, and disk sizing instead of fixed numbers. Use `depends_on` where VM creation order matters. Use the `portainer` provider (pin version explicitly). Configure Portainer endpoints via Terraform instead of manual UI steps. Store Portainer admin credentials in a secrets manager. Use Terraform to manage Portainer stacks and app templates. Prefer stack deployment from Git repositories for version control. Always specify `lifecycle` rules for resources that are costly to recreate. Use `prevent_destroy = true` for critical resources. Use `depends_on` for resources with implicit dependencies. Add a comment above each resource explaining purpose. Document all input variables with descriptions and types. Include module-level `README.md` with usage instructions. Use examples folder for sample module usage. Never commit secrets to the repo. Mark sensitive variables with `sensitive = true`. Reference API keys and passwords from environment variables or secret managers. Use least-privilege credentials for all providers. "
}
